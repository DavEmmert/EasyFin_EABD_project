services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://srv-captain--kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    networks:
      - kafka-net

  receiver:
    build: .
    image: dig/receiver
    command: python 01_receiver.py
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - kafka-net

  exchanger:
    build:  .
    image: dig/exchanger
    command: python 02_exchang_and_clock.py
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net

  buffer:
    build: .
    image: dig/buffer
    command: python 03_buffer_to_redis.py
    volumes:
      - .:/app
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - kafka-net

  dashboard:
    build: .
    image: dig/dashboard
    container_name: dig_data_finance_project-dashboard-1
    ports:
      - "8501:8501"
    command: streamlit run 04_dashboard.py --server.port=8501 --server.enableCORS=false
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_started
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge
